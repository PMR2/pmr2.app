========================
Exposure Creation Wizard
========================

In an effort to streamline the exposure creation process, a wizard that
unifies the disparate forms (documentation, file type, annotations, 
rollover) into a unified form that can serve as the base form for users
to interact with.  This is based on the rollover interface and data
structure used in the rollover interface.  There are a few components,
which includes an annotation object on the exposure object containing a
work-in-progress exposure structure, the json export version of this 
item to allow more dynamic user experience, along with the javascript
interactive controls that interface with the underlying form.  The
structure would also need to be reused later if necessary, allowing the
user to regenerate the form or load a new exposure structure from the
objects created through other means.

To demonstrate, we initialize the set of imports.
::

    >>> from pprint import pprint
    >>> import zope.interface
    >>> import zope.component
    >>> from Products.CMFCore.utils import getToolByName
    >>> from pmr2.testing.base import TestRequest
    >>> from pmr2.app.interfaces import *
    >>> from pmr2.app.workspace.content import *
    >>> from pmr2.app.workspace.interfaces import *
    >>> from pmr2.app.exposure.content import *
    >>> from pmr2.app.exposure.interfaces import *
    >>> from pmr2.app.exposure.browser.browser import ExposurePort
    >>> from pmr2.app.exposure.browser import wizard
    >>> from pmr2.app.exposure.browser import workspace
    >>> pp = lambda x: pprint(x, indent=4, width=1)

As the doctests by default do not have all the events in place, we use
the helper method to mark the portal request object with the layer.
::

    >>> self.markLayer()

We acquire an exposure object that's already been created.
::

    >>> context = self.portal.exposure['1']
    >>> context
    <Exposure at /plone/exposure/1>

Then adapt that into an exposure wizard, which provides some helper
methods and the place to store a work-in-progress exposure structure.
Currently it should be unintialized.
::

    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> IExposureWizard.providedBy(ewiz)
    True
    >>> ewiz.structure is None
    True

Render the wizard:
::

    >>> request = TestRequest()
    >>> context = self.portal.exposure['1']
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()

Workspace is currently private so it should be marked::

    >>> form._workspace_is_private
    True

In production usage, this can result in services not being able to
access all the required data, so this need to be rectified::

    >>> self._publishContent(self.portal.workspace.test)
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()
    >>> form._workspace_is_private
    False

It should have initialized the wizard's structure.
::

    >>> len(ewiz.structure)
    1
    >>> ewiz.structure[0][0]
    ''

That form should be fairly unpopulated, with only the view gen group in
place.
::

    >>> len(form.groups)
    1
    >>> form.groups[0].fields.keys()
    ['docview_generator', 'docview_gensource']

Adding a file should succeed.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(ewiz.structure)
    2
    >>> ewiz.structure[0]
    (None, {'file_type': None})
    >>> ewiz.structure[1]
    ('', {'commit_id': u'2', 'title': u'', 'curation': {}, 
    'workspace': u'/plone/workspace/test', 'docview_gensource': None, 
    'docview_generator': None, 'Subject': ()})

Alternatively, we can use the create exposure form to create our initial
exposure.
::

    >>> wkspc = self.portal.workspace.test
    >>> request = TestRequest(
    ...     form={
    ...         'file.widgets.filetype': 'Test Type',
    ...         'file.widgets.filename': 'file2',
    ...         'view.widgets.docview_generator': 'safe_html',
    ...         'view.widgets.docview_gensource': 'file2',
    ...         'form.buttons.add': 1,
    ...     })
    >>> form = workspace.CreateExposureForm(wkspc, request)
    >>> commit_id = '1'
    >>> form.traverse_subpath = [commit_id]
    >>> result = form()
    >>> context = form.ctxobj

Now instantiate the wizard form.  Once update is called, the groups will
be properly instantiated with the correct field entries created based on
the annotation specified.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> form.groups[0].fields.keys()
    ['docview_generator', 'docview_gensource']
    >>> form.groups[1].fields.keys()
    ['filename']
    >>> len(form.groups[1].groups)
    2
    >>> form.groups[1].groups[0].fields.keys()
    ['edited_note.note']
    >>> form.groups[1].groups[1].fields.keys()
    ['post_edited_note.chars']

Rendering the form, using our customized test renderer based on the one
used on the live stack, the fields should be available and populated.
::

    >>> result = form.render()
    >>> 'edited_note.note' in result
    True
    >>> 'post_edited_note.chars' in result
    True

We should also be able to view this using the prepared TestBrowser
instance.
::

    >>> b = self.testbrowser
    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()

Find that the update button for that subgroup is in place.
::

    >>> b.getControl(name='view.buttons.update')
    <SubmitControl name='view.buttons.update' type='submit'>

Validate the values for the root subform are correctly populated.
::

    >>> b.getControl(name='view.widgets.docview_generator:list').value
    ['safe_html']
    >>> b.getControl(name='view.widgets.docview_gensource:list').value
    ['file2']

The fields within the subgroups should have the fields correctly
instantiated and accessible by the browser.
::

    >>> b.getControl(name='annotate0.widgets.filename:list').value
    ['file2']
    >>> b.getControl(name='annotate0.widgets.edited_note.note').value
    ''
    >>> b.getControl(name='annotate0.widgets.post_edited_note.chars').value
    ''

-------------------------
Using the exposure wizard
-------------------------

Activating the update button the main view generator subform should
modify the structure represented by the wizard.
::

    >>> request = TestRequest(form={
    ...     'view.widgets.docview_generator': [u'rest_to_html'],
    ...     'view.widgets.docview_gensource': [u'file1'],
    ...     'view.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[-1][1]['docview_gensource'] == u'file1'
    True
    >>> ewiz.structure[-1][1]['docview_generator'] == u'rest_to_html'
    True
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> len(ewiz.structure)
    2

Doing the same on the subgroup for the file should update that subgroup
only, even if the main view subgroup attributes are submitted.  Also,
the ordering specified in the file type must be maintained.
::

    >>> request = TestRequest(form={
    ...     'view.widgets.docview_generator': [u'safe_html'],
    ...     'view.widgets.docview_gensource': [u'file2'],
    ...     'annotate0.widgets.filename': [u'file2'],
    ...     'annotate0.widgets.edited_note.note': u'Testing',
    ...     'annotate0.widgets.post_edited_note.chars': u'2',
    ...     'annotate0.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[-1][1]['docview_gensource'] == 'file1'
    True
    >>> ewiz.structure[-1][1]['docview_generator'] == 'rest_to_html'
    True
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'edited_note', {'note': u'Testing'}),
    ...     (u'post_edited_note', {'chars': 2}),
    ...     (u'rot13', None),
    ... ]
    True

To add more files, select the add button.  This should spawn a new file
choice selection subgroup for the user to specify the file type.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[1]
    (None, {'file_type': None})
    >>> len(ewiz.structure)
    3

Push again and we get another.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(ewiz.structure)
    4

Maybe that was too much.  We can delete that last group we added.
::

    >>> request = TestRequest(form={
    ...     'file2.buttons.delete': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(ewiz.structure)
    3

Rendering should show a new group for the user to select the file type.
::

    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='file1.widgets.filename:list').value
    ['--NOVALUE--']
    >>> b.getControl(name='file1.widgets.filename:list').displayOptions
    ['No value', 'file1', 'file2', 'file3']
    >>> b.getControl(name='file1.widgets.filetype:list').value
    ['--NOVALUE--']
    >>> b.getControl(name='file1.widgets.filetype:list').displayOptions
    ['No value', 'Docgen Type', 'Test Type']

We now update the form.
::

    >>> request = TestRequest(form={
    ...     'file1.widgets.filename': [u'file2'],
    ...     'file1.widgets.filetype': [u'Test Type'],
    ...     'file1.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    3
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[1][0] == u'file2'
    True
    >>> ewiz.structure[1][1]['views'] == [
    ...     (u'edited_note', None),
    ...     (u'post_edited_note', None),
    ...     (u'rot13', None),
    ... ]
    True

Can fill this out using the test browser.
::

    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='annotate1.widgets.filename:list').value = ['file3']
    >>> b.getControl(
    ...     name='annotate1.widgets.edited_note.note').value = 'Hi'
    >>> b.getControl(
    ...     name='annotate1.widgets.post_edited_note.chars').value = '1'
    >>> b.getControl(name='annotate1.buttons.update').click()
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[1][0] == u'file3'
    True
    >>> ewiz.structure[1][1]['views'] == [
    ...     (u'edited_note', {'note': u'Hi'}),
    ...     (u'post_edited_note', {'chars': 1}),
    ...     (u'rot13', None),
    ... ]
    True

The subgroup within the wizard should be able to acquire the content 
object with the above selected values set.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> form.groups[2].groups[0].getContent().note
    u'Hi'
    >>> form.groups[2].groups[1].getContent().chars
    1

Now when we render the wizard again, those fields should have been 
selected.
::

    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='annotate1.widgets.filename:list').value
    ['file3']
    >>> b.getControl(name='annotate1.widgets.edited_note.note').value
    'Hi'
    >>> b.getControl(name='annotate1.widgets.post_edited_note.chars').value
    '1'

----------------------------------
Building the exposure using wizard
----------------------------------

Given that structure, we should be able to generate the exposure with
the build button.  As a more extensive validation method is triggered
with this button to catch all errors (mostly missing values), this will
require all values to be presented in the request, which will be the
case in the context of a browser, but not necessarily in the context of
a manually constructed request object.

If and when the validation routine is customized for this action/form to
validate what is in the context as opposed to what is again submitted
(those values actually would be ignored), using the testbrowser for this
test will be absolutely required unless we want to replicate the entire
request form variables.
::

    >>> b.getControl(name='form.buttons.build').click()

Now verify that the structure is equal to the one generated from the
export form.  For now we munge the data a bit for backwards
compatibility.
::

    >>> request = TestRequest()
    >>> porter = ExposurePort(context, request)
    >>> reference_result = list(porter.export())
    >>> error_testing_structure = list(porter.export())

    >>> result = list(porter.export())
    >>> answer = ewiz.structure

    >>> del result[0][1]['docview_gensource']
    >>> del result[0][1]['docview_generator']
    >>> del result[1][1]['docview_gensource']
    >>> del result[1][1]['docview_generator']

    >>> del result[0][1]['views'][1][1]['text']
    >>> del result[1][1]['views'][1][1]['text']

    >>> result[0][1]['Subject'] = list(result[1][1]['Subject'])
    >>> result[1][1]['Subject'] = list(result[1][1]['Subject'])

    >>> if not result == answer:
    ...     pp(answer)
    ...     pp(result)

-------------------------------------
Deleting, Clearing, Reverting changes
-------------------------------------

Users may decide to revert the wizard into the same state as the created
objects.  This will let them achieve it.  First we can try to make some
changes in the wizard by deleting some groups with the delete button.
::

    >>> print [s[0] for s in ewiz.structure]
    ['file2', 'file3', '']
    >>> request = TestRequest(form={
    ...     'annotate0.buttons.delete': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()

Make sure that the intended group that we wanted to delete and not some
other group was deleted.
::

    >>> print [s[0] for s in ewiz.structure]
    ['file3', '']

Sometimes the wrong file type may have been selected.  The clear button
provides the function to reset the groups to allow the selection of a 
different one.  Once that is triggered, the structure for that file will
be reverted back to the default state.
::

    >>> request = TestRequest(form={
    ...     'annotate0.buttons.clear': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[0]
    ('file3', {})

While the structure is now cleared, the form should be rendered to
confirm that the user can select a new file type.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()
    >>> 'Test Type' in result
    True
    >>> 'file0.buttons.' in result
    True

Also check that the original filename is still selected.  We'll use the
testbrowser to do this quickly.
::

    >>> b = self.testbrowser
    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='file0.widgets.filename:list').value
    ['file3']

Also test that this group can be properly reused.  We select a different
filename and it should maintain this way.
::

    >>> b.getControl(name='file0.widgets.filename:list').value = ['file2']
    >>> b.getControl(name='file0.widgets.filetype:list').value = ['Test Type']
    >>> b.getControl(name='file0.buttons.update').click()
    >>> ewiz.structure[0][0]
    'file2'
    >>> ewiz.structure[0][1]['file_type']
    '/plone/test_type'

Clear this again.
::

    >>> b.getControl(name='annotate0.buttons.clear').click()
    >>> ewiz.structure[0]
    ('file2', {})

Now we delete this cleared group, and see that our structure is now
reduced to a single element - the default.  Note that the right groups
::

    >>> request = TestRequest(form={
    ...     'file0.buttons.delete': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(ewiz.structure)
    1

Lastly, the delete and clear button should have been disabled on the
main form.
::

    >>> request = TestRequest(form={
    ...     'view.buttons.clear': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> request = TestRequest(form={
    ...     'view.buttons.delete': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure
    [('', {'commit_id': u'1', 'title': u'', 'curation': {}, 
    'workspace': u'/plone/workspace/test', 'docview_gensource': 'file1', 
    'docview_generator': u'rest_to_html', 'Subject': ()})]

Now trigger the revert button.  The structure as seen in the exposure
should be completely reverted.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.revert': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> result = list(porter.export())
    >>> answer = ewiz.structure
    >>> result == answer
    True

------------------------------
Migrating to updated filetypes
------------------------------

There will be times where a particular exposure file type gets updated
to a newer format.  As the wizard will use the views as specified within
the file entry for a particular file and not as specified by the view,
this discrepency will need to be notified to the user.

Naturally, the interface associated with this feature should remain 
hidden until necessary.  Verify that the interface is hidden before this
feature test.
::

    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()
    >>> 'annotate0.buttons.migrate' in result
    False

Now we modify the test file type that the exposure had been using, and
render the wizard form again.
::

    >>> self.portal.test_type.views = [
    ...     u'edited_note', u'post_edited_note', u'base64', u'rot13']
    >>> self.portal.test_type.reindexObject()
    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()
    >>> 'annotate0.buttons.migrate' in result
    True
    >>> 'updated file type definition' in form.groups[1].status
    True

Once that is done, try the migrate button.
::

    >>> request = TestRequest(form={
    ...     'annotate0.buttons.migrate': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'edited_note', {'note': u'Testing'}),
    ...     (u'post_edited_note', {'text': u'fi', 'chars': 2}),
    ...     (u'base64', None),
    ...     (u'rot13', None),
    ... ]
    True

Do note that removed views will be removed along with any values defined
with them.
::

    >>> self.portal.test_type.views = [
    ...     u'edited_note', u'base64']
    >>> self.portal.test_type.reindexObject()
    >>> request = TestRequest(form={
    ...     'annotate0.buttons.migrate': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'edited_note', {'note': u'Testing'}),
    ...     (u'base64', None),
    ... ]
    True

New views, even with possible required fields, will not have any data
associated with them even if they had previously.  Also the ordering
is updated to the new order.
::

    >>> self.portal.test_type.views = [
    ...     u'rot13', u'base64', u'post_edited_note', u'edited_note']
    >>> self.portal.test_type.reindexObject()
    >>> request = TestRequest(form={
    ...     'annotate0.buttons.migrate': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'rot13', None),
    ...     (u'base64', None),
    ...     (u'post_edited_note', None),
    ...     (u'edited_note', {'note': u'Testing'}),
    ... ]
    True

If objects were previously generated by the wizard, using the revert
button will return to the original views.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.revert': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[0][1]['views'] == [
    ...     (u'edited_note', {'note': u'Testing'}),
    ...     (u'post_edited_note', {'text': u'fi', 'chars': 2}),
    ...     (u'rot13', None),
    ... ]
    True

------------------
File type handling
------------------

There may be cases where the file type used by a file is not available
at a particular instance for whatever reason - this can be caused by
external imports between separate PMR2 instances.  This condition will
be made known to the user.  Here the file type is changed to one that
does not exist in this instance.
::

    >>> ewiz.structure[0][1]['file_type'] = '/plone/unavailable'
    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> result = form()
    >>> 'Could not find the original file type' in form.groups[1].status
    True
    >>> 'annotate0.buttons.migrate' in result
    False
    >>> ewiz.structure[0][1]['file_type'] = '/plone/test_type'

There may be cases where the file type is unspecified.  The default
docgen annotation should at least be provided.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(ewiz.structure)
    4
    >>> request = TestRequest(form={
    ...     'file2.widgets.filename': [u'file1'],
    ...     'file2.widgets.filetype': [],
    ...     'file2.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure[2] == ('file1', {
    ...     'file_type': None,
    ...     'hidden_views': [],
    ...     'views': [('docgen', None)], 
    ...     'selected_view': None, 
    ...     'Subject': ()
    ... })
    True

------------------
File name handling
------------------

There will be annotations that make references to file names, which must
correctly reference from the current revision that the underlying 
exposure is based on.  Begin fresh again by clearing, adding a test file
and select the predefined type with the filename selection notes that
are available.
::

    >>> ewiz.structure = []
    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> request = TestRequest(form={
    ...     'file0.widgets.filename': [u'file1'],
    ...     'file0.widgets.filetype': [u'Docgen Type'],
    ...     'file0.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()

Now the assignment should work without errors.
::

    >>> request = TestRequest(form={
    ...     'annotate0.widgets.filename': [u'file2'],
    ...     'annotate0.widgets.docgen.source': [u'file2'],
    ...     'annotate0.widgets.docgen.generator': [u'safe_html'],
    ...     'annotate0.widgets.filename_note.filename': [u'file2'],
    ...     'annotate0.buttons.update': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[0] == ('file2', {
    ...     'file_type': '/plone/docgen_type',
    ...     'hidden_views': [],
    ...     'views': [
    ...         (u'docgen', {'source': 'file2', 'generator': u'safe_html'}),
    ...         (u'filename_note', {'filename': 'file2'})
    ...     ],
    ...     'selected_view': None, 'Subject': []})
    True

See if this builds, and the filename correctly choosen from the commit
this exposure represents.
::

    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='form.buttons.build').click()
    >>> zope.component.getAdapter(context.file2, name='filename_note').filename
    'file2'
    >>> sorted(context.file2.views)
    [u'docgen', u'filename_note']

-----------------
Directory entries
-----------------

As the backend does not track directories, the actual directory entries
(which references documentation to be generated) will need to be 
dynmically created when a nested file is added without a corresponding
directory entry.

We instantiate an exposure with a workspace and commit_id that has
directories in place, and add a file.
::

    >>> self._mkexposure(u'/plone/workspace/test', u'3', '4')
    >>> context = self.portal.exposure['4']
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()

Now select a nested file.  While adding a nested file should spaw all
directory entries, this overloads our current design at this stage.
::

    >>> request = TestRequest(form={
    ...     'file0.widgets.filename': [u'dir1/nested/file'],
    ...     'file0.widgets.filetype': [u'Docgen Type'],
    ...     'file0.buttons.update': 1,
    ...     'debug': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()

We are however going to follow up with the rollover case, where these
ExposureFolder entries are included.  They should not interfere with the
rendering of the form.
::

    >>> ewiz.structure = [
    ...     ('dir1/nested/file', {
    ...         'file_type': '/plone/docgen_type',
    ...         'hidden_views': [],
    ...         'views': [(u'docgen', None), (u'filename_note', None)],
    ...         'selected_view': None, 'Subject': []
    ...     }),
    ...     ('dir1/nested', {
    ...         'docview_gensource': None,
    ...         'docview_generator': None,
    ...         'Subject': ()
    ...     }),
    ...     ('dir1', {
    ...         'docview_gensource': None,
    ...         'docview_generator': None,
    ...         'Subject': ()
    ...     }),
    ...     ('', {
    ...         'commit_id': u'3',
    ...         'title': u'',
    ...         'curation': {},
    ...         'workspace': u'/plone/workspace/test',
    ...         'docview_gensource': None,
    ...         'docview_generator': None,
    ...         'Subject': ()
    ...     }),
    ... ]
    >>> request = TestRequest(form={
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    4
    >>> result = form.render()

Now build this thing.  The file should be generated and the views be
appended::

    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='form.buttons.build').click()
    >>> context.dir1.nested.file.views
    []

Or not, as the data was not populated, no views entry were generated.
Retry again with these entered::

    >>> ewiz.structure[0][1]['views'] = [
    ...     (u'docgen', {'source': 'dir1/nested/file',
    ...                            'generator': u'safe_html'}),
    ...     (u'filename_note', {'filename': 'dir1/nested/file'})
    ... ]
    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='form.buttons.build').click()
    >>> context.dir1.nested.file.views
    [u'docgen', u'filename_note']

-----------------
Wizard action tab
-----------------

When the exposure is submitted for publication, users with normal
permissions should no longer have access to the wizard if it has been
submitted for publication.  So let's try that::

    >>> b.getLink('Exposure Root').click()
    >>> '"contentview-wizard_landing"' in b.contents
    False
    >>> b.getLink('Wizard').url.startswith('http://nohost/plone/exposure/4/')
    True
    >>> 'wizard' in b.getLink('Wizard').url
    True
    >>> 'wizard_landing' in b.getLink('Wizard').url
    False
    >>> b.getLink(id='workflow-transition-submit').click()
    >>> b.getLink('Exposure Root').click()
    >>> '"contentview-wizard"' in b.contents
    False
    >>> 'wizard_landing' in b.getLink('Wizard').url
    True
    >>> b.getLink('Wizard').click()
    >>> 'restricted once the exposure has been' in b.contents
    True
    >>> b.getLink('Contents').click()
    >>> b.getLink(id='workflow-transition-retract').click()

Note that the wizard tab now goes to the wizard landing after the
exposure was submitted for publication, and neither of those tabs appear
at the same time.  This is to allow users to have a consistent way to
visit that view to acquire the export link.

-------------------
User error handling
-------------------

Due to the lack of any constraints on the forms for maximum flexibility
for the users, sometimes subgroups may be empty or contain missing data.
The following attempts to cover some of the cases.

First acquire a clean foundation to work on.
::

    >>> self._mkexposure(u'/plone/workspace/test', u'1', '3')
    >>> context = self.portal.exposure['3']
    >>> ewiz = zope.component.getAdapter(context, IExposureWizard)
    >>> ewiz.structure = error_testing_structure

User leaving behind empty add file groups should be ignored.
::

    >>> request = TestRequest(form={
    ...     'form.buttons.add_file': 1,
    ... })
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> ewiz.structure[2]
    (None, {'file_type': None})
    >>> len(ewiz.structure)
    4

See if this still builds, and then exports into our structure
::

    >>> b.open(context.absolute_url())
    >>> b.getLink('Wizard').click()
    >>> b.getControl(name='form.buttons.build').click()
    >>> porter = ExposurePort(context, request)
    >>> result = list(porter.export())
    >>> result == reference_result
    True

---------------------
Malform data handling
---------------------

There will be times where an imported structure contains slightly 
malformed fields.  The wizard should not error out, and then handle them
by either removing or raise an error message if that can't be done.

If an entry is None, it should safely ignored.
::

    >>> ewiz.structure = [
    ...     ('file2', {
    ...         'hidden_views': [],
    ...         'views': [
    ...             (u'edited_note', {'note': u'Testing'}),
    ...             (u'post_edited_note', {'text': u'fi', 'chars': 2}),
    ...             (u'rot13', None)
    ...         ],
    ...         'file_type': '/plone/test_type',
    ...         'selected_view': None,
    ...         'docview_gensource': None,
    ...         'docview_generator': None,
    ...         'Subject': ('please_ignore',)
    ...     }),
    ...     None,
    ...     ('', {
    ...         'commit_id': u'1',
    ...         'title': u'',
    ...         'curation': {},
    ...         'workspace': u'/plone/workspace/test',
    ...         'docview_gensource': 'file1',
    ...         'docview_generator': u'rest_to_html',
    ...         'Subject': ()
    ...     }),
    ... ]
    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2

If an entry has multiple items, the first two items should be handled as
normal.
::

    >>> ewiz.structure = [
    ...     ('file2', {
    ...         'hidden_views': [],
    ...         'views': [
    ...             (u'edited_note', {'note': u'Testing'}),
    ...             (u'post_edited_note', {'text': u'fi', 'chars': 2}),
    ...             (u'rot13', None)
    ...         ],
    ...         'file_type': '/plone/test_type',
    ...         'selected_view': None,
    ...         'docview_gensource': None,
    ...         'docview_generator': None,
    ...         'Subject': ('please_ignore',)
    ...     }, None),
    ...     ('', {
    ...         'commit_id': u'1',
    ...         'title': u'',
    ...         'curation': {},
    ...         'workspace': u'/plone/workspace/test',
    ...         'docview_gensource': 'file1',
    ...         'docview_generator': u'rest_to_html',
    ...         'Subject': ()
    ...     }, None),
    ... ]
    >>> request = TestRequest()
    >>> form = wizard.ExposureWizardForm(context, request)
    >>> form.update()
    >>> len(form.groups)
    2
    >>> result = form.render()
    >>> 'Testing' in result
    True
